'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /* eslint-disable complexity */


exports.default = function (options, format) {
  var compress = false;
  if (format === 'umd-compress') {
    format = 'umd';
    compress = true;
  }

  var plugins = [require('rollup-plugin-json')(options.json)];

  var js = options.js === false ? null : options.js || 'buble';

  var jsOptions = js && options[js] || {};

  // Add default options for buble plugin
  if (js === 'buble') {
    var transforms = jsOptions.transforms;
    jsOptions = _extends({
      objectAssign: 'Object.assign',
      include: ['**/*.{js,jsx,es6}']
    }, jsOptions, {
      transforms: _extends({
        generator: false,
        dangerousForOf: true
      }, transforms)
    });

    // optionally compile async/await to generator function
    if (js === 'buble' && jsOptions.async !== false) {
      plugins.push(require('rollup-plugin-async')());
    }
  }

  if (options.flow) {
    plugins.push(require('rollup-plugin-flow')());
  }

  if (js) {
    var jsPlugin = void 0;
    try {
      jsPlugin = js === 'buble' ? require('rollup-plugin-buble') : (0, _reqCwd2.default)(`rollup-plugin-${js}`);
      plugins.push(jsPlugin(jsOptions));
    } catch (err) {
      if (/missing path/.test(err.message)) {
        throw new Error(`rollup-plugin-${js} was not found in current working directory!`);
      } else {
        throw err;
      }
    }
  }

  if (options.plugins) {
    var _plugins = Array.isArray(options.plugins) ? options.plugins : [options.plugins];
    var extraPlugins = _plugins.map(function (p) {
      if (typeof p === 'string') {
        return (0, _reqCwd2.default)(`rollup-plugin-${p}`)(options[p]);
      }
      return p;
    });
    plugins = [].concat(_toConsumableArray(plugins), _toConsumableArray(extraPlugins));
  }

  if (options.alias) {
    plugins.push(require('rollup-plugin-alias')(options.alias));
  }

  if (options.replace) {
    plugins.push(require('rollup-plugin-replace')(options.replace));
  }

  // env is automatically stringified
  if (options.env) {
    var env = Object.keys(options.env).reduce(function (res, key) {
      res[`process.env.${key}`] = JSON.stringify(options.env[key]);
      return res;
    }, {});
    plugins.push(require('rollup-plugin-replace')({
      values: env
    }));
  }

  if (format === 'umd' || options.resolve) {
    var esModules = options.esModules === undefined ? true : options.esModules;
    plugins.push(require('rollup-plugin-node-resolve')({
      skip: options.skip,
      jsnext: esModules,
      module: esModules,
      browser: options.browser
    }), require('rollup-plugin-commonjs')(Object.assign({
      include: 'node_modules/**'
    }, options.commonjs)));
  }

  var banner = void 0;
  if (options.banner) {
    if (typeof options.banner === 'string') {
      banner = options.banner;
    } else {
      var pkg = typeof options.banner === 'object' ? _extends({}, options.pkg, options.banner) : options.pkg;

      var name = pkg.name;

      if (typeof name !== 'string') {
        throw new TypeError(`Expect "name" in package.json to be a string but got ${typeof name}.`);
      }

      var version = pkg.version ? `v${pkg.version}` : '';
      var year = pkg.year || new Date().getFullYear();

      var author = typeof pkg.author === 'string' ? pkg.author : typeof pkg.author === 'object' ? (0, _stringifyAuthor2.default)(pkg.author) : '';
      author = author ? author : '';

      var license = pkg.license || '';

      banner = '/*!\n' + ` * ${name} ${version}\n` + ` * (c) ${year}-present ${author}\n` + (license && ` * Released under the ${license} License.\n`) + ' */';
    }
  }

  if (compress) {
    plugins.push(require('rollup-plugin-uglify')({
      output: {
        // Preserve banner
        preamble: banner
      }
    }));
  }

  var moduleName = 'index';
  if (options.moduleName) {
    moduleName = options.moduleName;
  } else if (options.name) {
    moduleName = (0, _camelcase2.default)(options.name);
  }

  var external = void 0;
  if (format === 'cjs') {
    // Exclude .json files in commonjs bundle
    external = function external(id) {
      return (/\.json$/.test(id)
      );
    };
  }
  external = options.external || external;

  return {
    exports: options.exports,
    entry: options.entry,
    paths: options.paths,
    dest: getDest(options, format, compress),
    sourceMap: getMap(options, compress),
    plugins,
    format,
    moduleName,
    external,
    banner
  };
};

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _camelcase = require('camelcase');

var _camelcase2 = _interopRequireDefault(_camelcase);

var _reqCwd = require('req-cwd');

var _reqCwd2 = _interopRequireDefault(_reqCwd);

var _stringifyAuthor = require('stringify-author');

var _stringifyAuthor2 = _interopRequireDefault(_stringifyAuthor);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function getDest(options, format, compress) {
  var name = options.name;
  var dir = options.outDir;
  var suffix = '.js';
  if (format === 'cjs') {
    suffix = '.common.js';
  } else if (format === 'es') {
    suffix = '.es.js';
  } else if (compress) {
    suffix = '.min.js';
  }
  var output = _path2.default.join(dir, name + suffix);
  return output;
}

function getMap(options, compress) {
  return compress ? true : options.map;
}