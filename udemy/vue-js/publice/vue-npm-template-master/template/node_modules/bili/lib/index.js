'use strict';

var _cac = require('cac');

var _cac2 = _interopRequireDefault(_cac);

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _updateNotifier = require('update-notifier');

var _updateNotifier2 = _interopRequireDefault(_updateNotifier);

var _bili = require('./bili');

var _bili2 = _interopRequireDefault(_bili);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable unicorn/no-process-exit */
var cli = (0, _cac2.default)();

(0, _updateNotifier2.default)({ pkg: cli.pkg }).notify();

cli.option('config, c', 'Path to config file').option('watch, w', 'Run in watch mode').option('name, n', 'The filename of output file, no extension').option('out-dir, d', 'The output directory').option('format', 'Bundle format, array of string').option('module-name', 'The module name for UMD builds').option('map', 'Generate sourcemap, boolean or `inline`').option('compress', 'Generate a UMD bundle and compress it with sourcemaps').option('skip', 'Exclude specfic modules in node_modules dir from bundled file').option('es-module', 'Respect `jsnext:main` and `module` field in package.json').option('browser', 'Respect `browser` field in package.json').option('alias', 'Set option for rollup-plugin-alias').option('replace', 'Set option for rollup-plugin-replace').option('flow', 'Remove flow type annotations').option('exports', 'Specific what export mode to use, `default` or `named`').option('resolve', 'Resolve external dependencies').option('banner', 'Content to insert to the top of bundle file, boolean or string or object');

cli.command('*', 'Bundle with bili', function (input, flags) {
  var options = Object.assign({
    entry: input[0]
  }, flags);

  return (0, _bili2.default)(options).catch(function (err) {
    console.log(err);
    if (err.snippet) {
      console.error(_chalk2.default.red(`---\n${err.snippet}\n---`));
    }
    console.error(err.message);
    process.exit(1); // eslint-disable-line xo/no-process-exit
  });
});

cli.parse();