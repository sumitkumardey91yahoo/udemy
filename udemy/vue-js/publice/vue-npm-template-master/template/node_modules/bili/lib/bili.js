'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function () {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var userConfig = (0, _getConfig2.default)(options.config);

  options = (0, _lodash2.default)({
    entry: './src/index.js',
    format: ['cjs'],
    outDir: './dist',
    name: 'index'
  }, userConfig, options);

  var formats = options.format;

  if (typeof formats === 'string') {
    if (formats === 'all') {
      formats = ['cjs', 'umd', 'es'];
    } else if (formats.indexOf(',') > -1) {
      formats = formats.split(',').map(function (v) {
        return v.trim();
      });
    } else {
      formats = [formats];
    }
  } else if (!Array.isArray(formats)) {
    throw new TypeError('Expect "format" to be a string or Array');
  }

  if (options.compress) {
    formats.push('umd-compress');
  }

  return Promise.all(formats.map(function (format) {
    var rollupOptions = (0, _getRollupOptions2.default)(options, format);
    if (options.watch) {
      var init = void 0;
      return new Promise(function (resolve) {
        var watcher = (0, _rollupWatch2.default)(rollup, rollupOptions);
        watcher.on('event', function (event) {
          (0, _switchy2.default)({
            STARTING() {
              log(format, 'starting', _chalk2.default.white.bgBlue);
              if (!init) {
                init = true;
                return resolve();
              }
            },
            BUILD_START() {},
            BUILD_END() {
              log(format, 'bundled successfully', _chalk2.default.black.bgGreen);
            },
            ERROR() {
              var error = event.error;
              log(format, '', _chalk2.default.white.bgRed);
              if (error.snippet) {
                console.error(_chalk2.default.red(`---\n${error.snippet}\n---`));
              }
              console.error(error.stack);
            },
            default() {
              console.error('unknown event', event);
            }
          })(event.code);
        });
      });
    }
    return rollup.rollup(rollupOptions).then(function (bundle) {
      return bundle.write(rollupOptions);
    });
  }));
};

var _rollup = require('rollup');

var rollup = _interopRequireWildcard(_rollup);

var _rollupWatch = require('rollup-watch');

var _rollupWatch2 = _interopRequireDefault(_rollupWatch);

var _switchy = require('switchy');

var _switchy2 = _interopRequireDefault(_switchy);

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _fancyLog = require('fancy-log');

var _fancyLog2 = _interopRequireDefault(_fancyLog);

var _lodash = require('lodash.merge');

var _lodash2 = _interopRequireDefault(_lodash);

var _getRollupOptions = require('./get-rollup-options');

var _getRollupOptions2 = _interopRequireDefault(_getRollupOptions);

var _getConfig = require('./get-config');

var _getConfig2 = _interopRequireDefault(_getConfig);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function log(type, msg, color) {
  if (!color) {
    (0, _fancyLog2.default)(`${type} ${msg}`);
    return;
  }
  (0, _fancyLog2.default)(`${color(type)} ${msg}`);
}